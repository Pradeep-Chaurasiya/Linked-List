/**
 * Definition for singly-linked list.
 * class ListNode {
 *     public int val;
 *     public ListNode next;
 *     ListNode(int x) { val = x; next = null; }
 * }
 */
public class Solution {
    public ListNode partition(ListNode A, int B) {
        
        // ArrayList<ListNode> less = new ArrayList<>();
        // ArrayList<ListNode> greater = new ArrayList<>();
        
        // ListNode curr = A;
        // if(curr.next == null) return A;
        // boolean flag1 = false;
        // boolean flag2 = false;
        
        // while(curr != null){
        //     int num = curr.val;
            
        //     if(num < B){
        //         less.add(curr);
        //         flag1 = true;
        //     } 
        //     else{
        //         flag2 = true;
        //         greater.add(curr);
        //     } 
        //     curr = curr.next;
        // }
        
        // ListNode temp = null;
        // ListNode head = null;
        // if(flag1){
        //     head = less.get(0);
        //     temp = head;
        //     int n = less.size();
            
        //     for(int i=1; i<n; i++){
        //         temp.next = less.get(i);
        //         temp = less.get(i);
        //     }
        // }
        
        // if(flag1 == true && flag2 == true){
        //     int m = greater.size();
        
        //     for(int i=0; i<m; i++){
        //         temp.next = greater.get(i);
        //         temp = greater.get(i);
        //     }
            
        // }
        // else if(flag2 == true && flag1 != true){
        //     head = greater.get(0);
        //     temp = head;
        //     int m = greater.size();
        
        //     for(int i=0; i<m; i++){
        //         temp.next = greater.get(i);
        //         temp = greater.get(i);
        //     }
        // }
            
        // temp.next = null;
        
        // return head;
        
        ListNode lessprev = null;
        ListNode greaterprev = null;
        ListNode curr = A;
        if(curr.next == null) return A;
        
        ListNode head1 = null;
        ListNode head2 = null;
        
        while(curr != null){
            int num = curr.val;
            
            if(num < B){
                if(lessprev == null){
                    head1 = curr;
                    lessprev = curr;
                }
                else{
                    lessprev.next = curr;
                    lessprev = curr;
                }
            }
            else{
                if(greaterprev == null){
                    head2 = curr;
                    greaterprev = curr;
                }
                else{
                    greaterprev.next = curr;
                    greaterprev = curr;
                }
            }
            curr = curr.next;
        }
        if(lessprev != null && greaterprev == null){
            lessprev.next = null;
            return head1;
        }
        
        else if(greaterprev != null &&  lessprev == null){
            greaterprev.next = null;
            return head2;
        }
        
        else if(lessprev != null && greaterprev != null){
            lessprev.next = head2;
            greaterprev.next = null;
            return head1;
        }
      
        return head2;
        
    }
}
